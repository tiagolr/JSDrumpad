desc:JSDrumpad
tags: drum synth, instrument

import dp.envlib.jsfx-inc
import dp.mouselib.jsfx-inc
import dp.rbj_filter.jsfx-inc
import dp.gfxlib.jsfx-inc

slider1:mix=1<-1, 1, .01>Mix (Osc - Noise)
slider2:vol=-12<-90, 0, .01>Volume
slider3:pan=0<-1, 1, .01>Pan
slider4:distortion=0<0, 1, .01>Distortion

slider5:osc_freq=440<20, 10000, 1:log>Frequency (Hz)
slider6:osc_wave=1<0, 3, 1{Sine, Triangle, Saw, Square}>Wave
slider7:osc_att=1000<1, 5000, 1:log>Attack
slider8:osc_dec=1000<1, 5000, 1:log>Decay
slider9:osc_shape=1<0, 2, .01>Shape

slider10:pitch_amt=0<-1, 1, 0.01>Pitch ammount
slider11:pitch_att=0<1, 5000, 1:log>Pitch attack
slider12:pitch_dec=1000<1, 5000, 1:log>Pitch decay
slider13:pitch_shape=1<0, 2, 0.01>Pitch shape
slider14:pitch_track=0<0,1,1{No, Yes}>Keyboard tracking

slider15:noise_stereo=0<0, 1, 1{No, Yes}>Stereo noise
slider16:noise_att=0<1,5000, 1:log>Noise attack
slider17:noise_dec=1000<1,5000, 1:log>Noise decay
slider18:noise_shape=1<0, 2, 0.01>Noise shape
slider19:noise_cutoff=22000<20,22050,1>Noise color

slider20:filter_shape=0<0,3,1{Low Pass, Band Pass, High Pass}>Filter shape
slider21:filter_freq=22000<20, 22050, 1:log>Filter frequency
slider22:filter_q=0.5<0.01, 40, 0.01>Filter Q

slider23:eq_freq=440<20, 22000, 1:log>EQ frequency
slider24:eq_gain=1<0.01, 8, 0.01>EQ gain
slider25:eq_q=0.5<0.01, 40, 0.01>EQ Q

slider26:vel_vol=1<0, 1, 0.01>Velocity volume

options:gfx_hz=60;

@init

osc_cycle = 0;
note_on = 0;
note_vel = 0;
note_counter = 0;

function wrap(number) (number <= 1 ? number : number - 1;);
function sine_wave(cycle) (sin(cycle * 2 * $pi););
function tri_wave(cycle) ((cycle > 0.5 ? 4 * cycle - 2 : -4 * cycle + 2) - 1;);
function saw_wave(cycle) (cycle * -2 + 1;);
function square_wave(cycle) (cycle < 0.5 ? -1 : 1;);
function make_noise(cycle) (rand(2) - 1;);
function db2gain(db) (10^(db / 20););
function note2freq(n) (440 * pow(2, (n - 69) / 12););

function make_wave(cycle) (
  osc_wave == 0 ? sine_wave(cycle)
    : osc_wave == 1 ? tri_wave(cycle)
    : osc_wave == 2 ? saw_wave(cycle)
      : square_wave(cycle)
);

function envelope_refresh() (
  att_shape = osc_shape > 1 ? 3.001 - osc_shape : osc_shape;
  dec_shape = osc_shape > 1 ? 2 - osc_shape : 1.001 + osc_shape;
  envelope.zen_update(
    0, // delay
    osc_att, // attack
    osc_dec, // decay
    -90, // sustain
    0, // release
    att_shape, // attack shape
    dec_shape, // decay shape
    1, // release shape
    100, // mix
    0, // min
    100 // max
  );

  att_shape = pitch_shape > 1 ? 3.001 - pitch_shape : pitch_shape;
  dec_shape = pitch_shape > 1 ? 2 - pitch_shape : 1.001 + pitch_shape;
  pitch_envelope.zen_update(0, pitch_att, pitch_dec, -90, 0, att_shape, dec_shape, 1, 100, 0, 100);

  att_shape = noise_shape > 1 ? 3.001 - noise_shape : noise_shape;
  dec_shape = noise_shape > 1 ? 2 - noise_shape: 1.001 + noise_shape;
  noise_envelope.zen_update(0, noise_att, noise_dec, -90, 0, att_shape, dec_shape, 1, 100, 0, 100);
);

@slider

gain = db2gain(vol);
drive = 2*min(distortion, 0.999)/(1-min(distortion, 0.999));
noise_lowpass.rbj_lp(noise_cutoff, 0.01);
filter_shape == 0 ? (
  noise_filter.rbj_lp(filter_freq, filter_q);
);
filter_shape == 1 ? (
  noise_filter.rbj_bp(filter_freq, filter_q);
);
filter_shape == 2 ? (
  noise_filter.rbj_hp(filter_freq, filter_q);
);
eq.rbj_eq(eq_freq, eq_q, eq_gain);

envelope_refresh();

@block

while (midirecv(offset, msg1, note, vel)) (
  event = msg1 & 0xF0;  // apply mask to determine event
  channel = msg1 & 0x0F;  // apply mask to determine channel

  event == 0x90 && vel > 0 ? (
    note_on = 1;
    note_vel = vel / 127;
    note_counter = 0;
    note_freq = note2freq(note);
    envelope.zen_trigger(1);
    pitch_envelope.zen_trigger(1);
    noise_envelope.zen_trigger(1);
  );

  midisend(offset, msg1, note, vel);
);

@sample

note_on ? (
  note_counter += 1 / srate * 1000;
  note_counter > osc_att + osc_dec && note_counter > noise_att + noise_dec ? (
    note_on = 0;
    envelope.zen_release();
    pitch_envelope.zen_release();
    noise_envelope.zen_release();
  );

  envelope.zen_process();
  pitch_envelope.zen_process();
  noise_envelope.zen_process();

  freq = pitch_track ? note_freq : osc_freq;
  osc_cycle = wrap(osc_cycle + freq / srate * pow(16, pitch_amt * pitch_envelope.env));
  wave_l = make_wave(osc_cycle) * envelope.env;
  wave_r = wave_l;
  noise_l = make_noise() * noise_envelope.env;
  noise_r = noise_stereo ? make_noise() * noise_envelope.env : noise_l;
  noise_cutoff < 22000 ? (
    noise_l = noise_lowpass.rbj_df1_0(noise_l);
    noise_r = noise_lowpass.rbj_df1_1(noise_r);
  );

  (filter_shape == 0 && filter_freq < 22000) ||
  (filter_shape == 1) ||
  (filter_shape == 2 && filter_freq > 20) ?
  (
    noise_l = noise_filter.rbj_df1_0(noise_l);
    noise_r = noise_filter.rbj_df1_1(noise_r);
  );

  mix < 0 ? (
    noise_l *= 1 + mix;
    noise_r *= 1 + mix;
  );
  mix > 0 ? (
    wave_l *= 1 - mix;
    wave_r *= 1 - mix;
  );
  pan < 0 ? (
    noise_r *= 1 + pan;
    wave_r *= 1 + pan;
  );
  pan > 0 ? (
    noise_l *= 1 - pan;
    wave_l *= 1 - pan;
  );

  spl0 = eq.rbj_df1_0(noise_l + wave_l);
  spl1 = eq.rbj_df1_1(noise_r + wave_r);

  distortion > 0 ? (
    spl0 = (1+drive)*spl0/(1+drive*abs(spl0));
    spl1 = (1+drive)*spl1/(1+drive*abs(spl1));
  );

  vel_mult = min(note_vel + (1 - vel_vol), 1);
  spl0 *= gain * vel_mult;
  spl1 *= gain * vel_mult;
);

@gfx 600 300

mouse.update_mouse_state();
gfx_clear = 0x141618;
draw_knob(100, 100, 2, "Vol", -12, -90, 0, 0, 0, sprintf(#, "%.1f Db", slider(2)));
draw_knob(180, 100, 3, "Pan", 0, -1, 1, 0, 1, sprintf(#, "%.2f", slider(3)));
draw_knob(260, 100, 5, "Freq", 440, 20, 10000, 1, 0, sprintf(#, "%i Hz", slider(5)));
draw_knob(340, 100, 8, "Decay", 1000, 1, 5000, 1, 0, sprintf(#, "%i ms", slider(8)));

mouse.left && mouse.dy != 0 && selknob_nslider ? (
  selknob_is_log ? (
    slider(selknob_nslider) = slider(selknob_nslider) * pow(100, -mouse.dy * 0.01 * (mouse.control ? 0.05 : 1));
  ) : (
    inc = (selknob_max - selknob_min) / 100 * -mouse.dy;
    mouse.control ? inc *= 0.05;
    slider(selknob_nslider) += inc;
  );

  slider(selknob_nslider) > selknob_max ? slider(selknob_nslider) = selknob_max;
  slider(selknob_nslider) < selknob_min ? slider(selknob_nslider) = selknob_min;
);

gfx_setcursor(selknob_nslider ? 32511 : 0);
!mouse.left ? selknob_nslider = 0;
